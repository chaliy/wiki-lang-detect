(cl:in-package #:wild)
(named-readtables:in-readtable rutilsx-readtable)


(defmacro microtime ((&optional label) &body body)
  (with-gensyms (beg)
    `(let ((,beg (local-time:now)))
       (prog1 (progn ,@body)
         (format *debug-io* "~A took ~9F sec~%" (or ,label ',body)
                 (local-time:timestamp-difference (local-time:now) ,beg))))))

(defun print-conf-mat (confm)
  (dotable (lang confs confm)
    (format *debug-io* "~&~A: ~$ |~{ ~A~}~%"
            lang (? confs lang)
            (mapcar ^(fmt "~A:~$" (lt %) (rt %))
                    (sort (remove lang (ht->pairs confs) :key 'lt)
                          '> :key 'rt)))))

(defun test-file (file &optional from-twitter)
  (let (rez)
    (dolines (line file)
      (when (> (length line) 20)
        (when from-twitter
          (:= line (re:regex-replace-all "@\\S+" line ""))
          ;; #+nil
          (:= line (subseq line 0 (position #\Space line
                                            :start (1+ (or (position #\Space line)
                                                           -1))))))
        (let ((langs (text-langs line)))
          (when (null (car (first langs)))
            (:= langs '((:und . 1.0))))
          (push (cons line langs)
                rez))))
    rez))

(defun test-dir (dir &key from-twitter (test-fn 'test-file))
  (let ((rez #h())
        (confm #h())
        (mism #h())
        (q 0.0)
        (cnt 0))
    (dolist (file (directory (merge-pathnames (fmt "data/~A/*.txt" dir))))
      (let ((filename (pathname-name file)))
        (unless (or (starts-with "not" filename :test 'string-equal)
                    (and (> (length filename) 2)
                         (not (string-equal "und" filename))))
          (let ((lang (mkeyw filename)))
            (:= (? rez lang) (call test-fn file from-twitter)))
          (princ "."))))
    (dotable (lang runs rez)
      (let ((cur #h())
            (total 0.0))
        (:= (? confm lang) cur)
        (dolist (run runs)
          (let ((guess (? run 1 0)))
            (if (eql guess lang)
                (:+ q)
                (push run (? mism lang)))
            (:+ (get# guess cur 0))
            (:+ total)))
        (dotable (lng _ cur)
          (:/ (? cur lng) total))
        (:+ cnt (length runs))))
    (print-conf-mat confm)
    (format *debug-io* "Total quality: ~$~%" (/ q cnt))
    (values confm
            mism)))

(deftest quality-smoke-test ()
  (dolist (file (directory (merge-pathnames "../data/smoke/*.txt")))
    (should be eql (mkeyw (pathname-name file))
            (text-lang (read-file file)))))

(deftest quality-wiki-test ()
  (test-dir "wiki"))
  
(deftest quality-twitter-test ()
  (test-dir "tw/rec")
  (test-dir "tw/prec"))
